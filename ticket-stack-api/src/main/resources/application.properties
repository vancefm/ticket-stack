

### These should be changed for security reasons if running in production
server.error.include-message = always
spring.datasource.url=jdbc:mysql://192.168.1.5:3307/ticketstack
spring.datasource.username=ticketstack
spring.datasource.password=T!cketstack1
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#Don't use the "hibernate_sequence" table to generate new ids
spring.jpa.properties.hibernate.id.new_generator_mappings=false
###

#logging.level.root=INFO
#logging.level.com.vancefm.ticketstack=INFO

#Kafka bootstrap servers are determined automatically:
# These correspond with the INTERNAL(docker) and EXTERNAL listeners respectively in the Kafka config.
# When test running the java app locally, the external listener is used.
# However, once the java app is deployed it uses the internal listener.
# This is required because when running the app locally we don't have access to the docker network
# and there is no DNS record available for kafka-broker0.
# So we must use the exposed port of the docker container
spring.kafka.bootstrap-servers=kafka-broker0:9092,localhost:9093

spring.kafka.consumer.group-id=api-consumer-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.client-id=ticket-stack-api
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer